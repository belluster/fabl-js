/*
* Copyright (C) 2004 Map Bureau - http://www.mapbureau.com
*
* This package is Free Software released under the BSD license.
*
* See license.html at the top of this package for the full license terms.
*
*/

// Most code comments temporarily excised, pending review


// maps URIs to their values


// representation of uris
// uris are represented by the result of parsing
// the id according to the following rules:
// / delimits the id into segments s0... sn
// in such a way that the original uri can be reconstructed
// by placing /'s between the segments.  However, any sequence of one or
// more delimiters other than a slash between two non-delimiters
// is called a "delimiter" segment; delimiter segments are not
// given trailing /s.
// This sequence of strings is the "pathname" of the uri.
// The uri itself  represented by a pointer to the node in the known_resources
// tree with  this pathname 


/* from the uri standard:

    reserved    = ";" | "/" | "?" | ":" | "@" | "&" | "=" | "+" |
                    "$" | ","

*/

var SeqOf(id) uriTable;
// throw in fragment separator #, and . here
var uriDels = sequence(';','/','?',':','@','&','=','+','$',',','#','.');


void function setupUriTable()
{
  var int ln,i,id s;
  ln = length(uriDels);
  uriTable = emptysequence(id);
  seqobExpand(uriTable~ob,256);
  for (i=0;i<ln;i++)
     {
	 s = uriDels[i];
     uriTable[s[0]~int] = s;
	 }
}

setupUriTable();
var splitBuf = SB('');

SeqOf(id) function splitToIds(string bf,int dl)
{
   var SeqOf(id) rs,int ln,i, c;
   rs = emptysequence(id);
   ln = length(bf);
   reset(splitBuf);
   for (i = 0;i<ln;i++)
       {
	   c = bf[i];
	   if (c == dl)
	      {
		  push(rs,toString(splitBuf));
		  reset(splitBuf);
		  }
	   else
	      addChar(splitBuf, c);
	   }
   if (length(splitBuf) > 0) push(rs,toString(splitBuf));
   return rs;
}

// form of the parse of a uri:  <scheme> ":" <id0> <id1> .. <idn> "#" <frag>

var ascii_sharp = 35;

SeqOf(id) function parseUri1(string bf)
{
   var SeqOf(id) rs,int ln,i,int c,boolean nfnd;
   rs = emptysequence(id);
   ln = length(bf);
   reset(splitBuf);
   // first find : or / whichever comes first
   nfnd = true;
   while ((i < ln) && nfnd)
       {
	   c = bf[i];
	   if ((c == ascii_colon) || (c == ascii_slash))
	      {
		  push(rs ,toString(splitBuf));
		  nfnd = false;
		  if (c == ascii_colon) 
		     {
			 if (length(splitBuf) == 0) error('nul scheme in uri: ',bf);
			 push(rs , ':');

// allow foo:a/b/c as equivalent to foo://a/b/c; disallow foo:/a/b however

			 if ((i+3 > ln) &&
			    (bf[i+1] == ascii_slash)&&(bf[i+2]==ascii_slash)) 
			 i=i+2;
			 }
		  reset(splitBuf);
		  }
	   else
		  addChar(splitBuf,c);
	   i = i + 1;
	   }
   nfnd = true;  
   while (i < ln)
       {
	   c = bf[i];
	   if ((c == ascii_sharp) || (c == ascii_slash))
	      {
		  push(rs,toString(splitBuf));
		  reset(splitBuf);
		  if (c == ascii_sharp) push(rs , '#');
		  }
	   else
		  addChar(splitBuf,c);
	   i = i + 1;
	   }
   if (length(splitBuf) > 0) push(rs , toString(splitBuf));
   return rs;
}
// "//" is equivalent to "/" except just after file:// 
// file///:a  yields the parse "file" ":" "" "a"
SeqOf(id) function removeNullStringsEx1(SeqOf(id) s)
{
   var int ln,i,SeqOf(id) rs,id cs;
   rs = emptysequence(id);
   ln = length(s);
   if (ln == 0) return s;
   push(rs ,s[0]);
   for (i=1;i<ln;i++)
       {
	   cs = s[i];
	   if ((length(cs) > 0)||
	       ((i==4) && (s[0] == "file") && 
		    (s[1]==":") && (s[2]=="") && (s[3]==""))) push(rs , cs);
	   }
   return rs;
}

SeqOf(id) function parseUri(string bf)
{
   
   return removeNullStringsEx1(parseUri1(bf));
}

// no type data associated with x (rdf:type is Resource)
boolean function untyped(ob x)
{
   var ob tp,int tpk,lnt,SeqOf(ob) tpsq;
   tp = iType(x);
   tpk = obkind(tp);
   if (tpk == values_kind)
      {
	  tpsq = tp ~ SeqOf(ob);
	  lnt = length(tpsq);
	  if (lnt == 0) return true;
	  if (lnt == 1) return eq(tpsq[0],Resource);
	  return false;
	  }
   return (nul(tp) || eq(tp,Resource));
}

void function installType(ob x,Sort srt)
{
  iInstall(ob,srt,false);
}


// In future, fabl may implement a general treatment of any declared equivalence (via
// owl:equivalentProperty, owl:equivalentClass, owl:sameAs)
// For now, equivalences are treated via an interning process. For each set of equivalent
// resources, a representative is chosen, and the non-representatives are converted 
// via the operations that generate resources. Specifically,
//  equivalents is an associative array that maps resources to their representatives

var equivalents = new(Resource);

void function addEquivalent(ob x,ob rep)
{
   set(equivalents,regarding(x),rep);
}


var internToEquivalents = true; 

ob function getEquivalent(ob x)
{
   var ob rs;
   if (!internToEquivalents) return x;
   rs =  get(equivalents,regarding(x));
   if (nul(rs)) return x;
   return rs;
}


// and a few basic equivalents, defined by OWL Full (see http://www.w3.org/TR/2003/WD-owl-semantics-20030203/rdfs.html


// code is a bit weird to pick up the versions in the new heap, not the old(like homeFimpfun)

var Function(ob,id,id) evalQname;
var Function(ob,string) resource;
void function stdEquivalents()
{
  var ob rdfProperty;
  rdfProperty = evalQname('rdf','Property');
  addEquivalent(evalQname('owl','Class'),evalQname('rdfs','Class'));
  addEquivalent(evalQname('owl','DatatypeProperty'),rdfProperty);
  addEquivalent(evalQname('owl','ObjectProperty'),rdfProperty);
  addEquivalent(evalQname('owl','Thing'),evalQname('rdfs','Resource'));
  addEquivalent(resource("http://www.w3.org/2001/XMLSchema#string"),evalQname('xsd','string'));
}



ob function uriToResource(ob rt,string bf,boolean alloc,Sort srt)
{
   var SeqOf(id) prs,id cprs,int ln,i,ob cv,nv;
   prs  = parseUri(bf);
   ln = length(prs);
   cv = rt;
   for (i = 0;i<ln;i++)
       {
	   cprs = prs[i];
	   // rdfs:Resource bug
//	   if (eq(cv,rdfsNS) && (i == (ln-1)) && (cprs == 'Resource')) return ob;
	   nv = selectUri(cv,cprs);
	   if (nul(nv))
	      {
		  if (not(alloc)) return nil;
		  if (i == (ln-1)) nv = iNew(srt); else nv = mkObject();
		  bindUri(cv,cprs,nv);
		  }
	   
	   cv = nv;
	   }
  cv = getEquivalent(cv);
  if (not(hasType(cv,srt))) 
     {
  	 if (untyped(cv)) setType(cv,srt);
	 else installType(cv,srt);
//	 error('Attempt to allocate a resource where one of a different type already exists: ',srt);
	 }
  return cv;
}

ob function uriToResource(ob rt,string bf,boolean alloc)
{
  return uriToResource(rt,bf,alloc,ob);
}

ob function uriToResource(string bf,boolean alloc)
{
  return uriToResource(root,bf,alloc);
}

ob function uriToResource(string bf)
{
  return uriToResource(bf,true);
}

ob function resource(string bf)
{
   return uriToResource(bf,true);
}

void function reversip(SeqOfOb sq)
{
   var int ln,hln,ln1,i,hi,ob v;
   ln = length(sq);
   hln = ln/2;
   ln1 = ln-1;
   for (i=0;i<hln;i++)
       {
	   hi = ln1-i;
	   v = sq[i];
	   sq[i] = sq[hi];
	   sq[hi] = v;
	   }
 }

SeqOf(id) function uriPath(ob x)
{
   var SeqOf(id) rs,ob cx,pr;
   rs = emptysequence(id);
   cx = x;
   while (true)
       {
	   if (eq(cx,root))
	      {
		  reversip(rs~SeqOfOb);
		  return rs;
		  }
	   pr = parent(cx);
	   if (nul(pr)) return nil~SeqOf(id);
	   push(rs , name(cx));
	   cx = pr;
	   }
}
// assumes form is scheme:a/b/c...
string function uriPathToUri(SeqOfId pth)
{
  var string rs,int ln,i,id cp,boolean hasfrag;
  hasfrag = false;
  rs = mkStringBuf('');
  ln = length(pth);
  if ((length(pth) < 3) || not(pth[1] == ':')) return "[unprintable uri]";
  rs * pth[0];
  rs * '://';
  for (i=2;i<ln;i++)
      {
	  cp = pth[i];
	  if (cp == '#') 
	     {
	     seqSetLength(rs~ob,length(rs)-1);// remove the / 
		 rs * '#';
		 if (i < (ln-1)) hasfrag = true;
		 }
	  else
	     {
	      rs * cp;
		  if (i < (ln-1)) rs * '/';
		  }
	  }
 //if (hasfrag) seqSetLength(rs~ob,length(rs)-1);// remove the / 
 return rs;
}


string function uri(ob x)
{
  var SeqOfId pth;
  pth = uriPath(x);
  if (nul(pth)) return nil~string;
  return uriPathToUri(pth);
}




