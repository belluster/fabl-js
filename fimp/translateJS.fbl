var string jsg, jsLastLocalVars, boolean translateJS, outputTypesToJS, closeStatementAfterNextXob, skipNextXob;
var Function(string, Xob) translateXob;

void function resetJS() {
	jsg = '';
	jsLastLocalVars = '';
}

void function storeJS(string fln) {
	writeln('Storing JS to file ', fln);
	writeToFile(fln,jsg);
}

string function translateId(id x) {
	var string js, xs;
	xs = '';
	xs * x;
	if ((xs == 'id') || (xs == 'void') || (xs == 'int') || (xs == 'string') || (xs == 'double') || (xs == 'boolean')
		|| (xs == 'false') || (xs == 'true') || (xs == 'byte') || (xs == 'date')) {
		js = 'fabl_';
		js * xs;
	} else {
		js = xs;
	}
	return js;
}

string function translateBinding(Binding binding) {
    var string js, ob k, int vk, boolean isdtp, Property p, Class btp,vtp0,ptp,vtp, Sort tp0, ob rg, v;
	js = '';
	k = bindingKey(binding);
	if (obkind(k)==string_kind) js * (k~id);
	else {
		tp0 = type0(k);
		if (tp0 == Regarding) {
			rg = obsel(k,Regarding_value);
			if (obkind(rg) == string_kind) js * translateId(rg~id);
			else {
				js * '<unprintable>';
				js * obkind(rg);
			}
		} else if (tp0 == FunctionalProperty) {
			p = k ~ Property;
			v = bindingValue(binding);
			btp = obsel(binding~ob,Binding_type)~Class;
			if (nul(btp) || (btp == ob)) {
				ptp = range(p);
				if (nnul(ptp)) vtp = ptp;
			}
			else vtp = btp;
			if (nul(vtp)) vtp = ob;
			vtp0 = type0(v);
			if (vtp0 != ob) {
				if (vtp == ob) vtp = vtp0;
				else vtp = mostSpecific([vtp0,vtp]);
			}
			// note that type deduction involving the class is not present here
			vk = obkind(v);
			if (vk == double_kind) vtp = double; //  only case where value is unambiguous in type
			isdtp = isString(v) || isId(v) || (vk == int_kind) || (vk == double_kind);
			//if (isString(v)) {
				addChar(js, ascii_squote);
				js * v;
				addChar(js, ascii_squote);
			//}
			/*js * '[';
			js * p;
			js * vk;
			if (isdtp)
				js * v;
			else {
				if (nnul(v)) js * obsel(v, rdf:type);
				js * v;
			}
			js * ']';*/
			/*js * '"';
			js * 'Not able to extract value from binding';
			js * '"';*/
		} else {
			addChar(js, ascii_squote);
			js * '<unknown binding type>';
			js * obkind(k);
			js * tp0;
			addChar(js, ascii_squote);
		}
	}
    return js;
}

string function translateThirdBinding(ob x) {
	var string js, SeqOf(Binding) bn, int i,ln;
	bn = bindings(x);
	ln = length(bn);
	js = '';
	// apparently the meaningful binding is the second one
	if (ln >= 3) {
		js * translateBinding(bn[2]);
	} else { js * 'only '; js * ln; js * ' bindings';
		for (i=0;i<ln;i++){
			js*translateBinding(bn[i]~Binding);
		}
	}
	return js;
}

string function translateConstant(Xob xconstant) {
    var string js,SeqOf(Binding) bn,Binding b,int ck, i, ln, dk;
	js = '';
	ck = obkind(xconstant);
	if (nul(xconstant)) {
		js * 'null';
	} else if (ck == hashtable_kind) {
		// if (bitsel(xconstant~ob,Xob1_booles,Xob1_isNoop)~boolean) js = ''; // noop => do not translate
		// else js * 'hashtableconstant';
		js * translateThirdBinding(xconstant~ob);
		/*js * '"';
		js * 'Not able to extract value from binding';
		js * '"';*/
	} else if (ck == binding_kind) {
		js * translateBinding(xconstant~Binding);
	} else if (ck == double_kind) {
		js * xconstant;
	} else if (ck == int_kind) {
		js * xconstant;
	} else if (ck == string_kind) {
		addChar(js, ascii_squote);
		js * xconstant;
		addChar(js, ascii_squote);
	} else if (ck == seq_kind) {
		dk = seqDataKind(xconstant);
		if (dk == seqDataOb_kind) {
			js * 'seqDataOb_kind';
		} else if (dk == seqDataByte_kind) {
			addChar(js, ascii_squote);
			js * (xconstant~string);
			addChar(js, ascii_squote);
		} else if (dk == seqDataShort_kind) {
			js * 'seqDataShort_kind';
		} else if (dk == seqDataInt_kind) {
			js * 'seqDataInt_kind';
		} else if (dk == seqDataDouble_kind) {
			js * 'seqDataDouble_kind';
		} else {
			js * '<unknown seq kind>';
		}
	} else {
		js * '<Unhandled constant kind>: ';
		js * ck;
	}
    return js;
}

string function translateDeclarations(ob x) {
	var string js,ob bt,pid,Class ptp,int ln,i,SeqOfBinding bb,Binding p0;
	js = '';
	bb = bindings(x);
	if (nnul(bb)) {
		ln = length(bb);
		for (i = 0;i<ln;i++) {
			p0 = bb[i];
			bt = obsel(p0,Binding_type);
			//writeln(i,ln,bindingKey(p0),bt);
			if (nnul(p0) && nnul(bt)) {
				pid = regardingValue(bindingKey(p0)); // variable name
				ptp = obsel(p0,Binding_type)~Class; // variable type, ie xsd:int
				if (outputTypesToJS) {
					js * '/* ';
					js * ptp;
					js * '*/ ';
				}
				js * pid;
				if (i < ln-1) js * ',';
			}
		}
	}
	return js;
}

string function translateLocalVariablesDeclaration(ob x) {
	var string js, dcl;
	js = '';
	dcl = translateDeclarations(x);
	if (length(dcl) > 0) {
		js * 'var ';
		js * dcl;
		js * ';';
	}
	return js;
}

string function decorateFunctionName(Function xfunction) {
	var string nm, pnm, dnm,Sort tp,SeqOfType itps, int ln, i;
	nm = obsel(xfunction~ob,Function_name)~id;
	tp = obsel(xfunction~ob,Function_type)~Sort;
	itps = inputTypes(tp);
	ln = length(itps);
	dnm = '';
	for (i = 0;i<ln;i++) {
		pnm = '';
		pnm * itps[i];
		pnm = replaceChar(pnm,ascii_colon,ascii_underbar,0,length(pnm));
		pnm = replaceChar(pnm,ascii_lparen,ascii_underbar,0,length(pnm));
		pnm = replaceChar(pnm,ascii_rparen,ascii_underbar,0,length(pnm));
		dnm * pnm;
		dnm * '__';
	}
	dnm * nm;
	return dnm;
}

string function translateFunction(Function xfunction) {
	var string js,id nm, ob pid,Sort tp,Sort rtp, Class ptp, SeqOfBinding bb, Binding p0;

	tp = obsel(xfunction~ob,Function_type)~Sort;

	js = '';
	js * 'function ';
	if (outputTypesToJS) {
		rtp = resultType(tp);
		js * '/*';
		js * rtp;
		js * '*/ ';
	}
	js * decorateFunctionName(xfunction);
	js * '(';
	js * translateDeclarations(c_params); // c_params is filled in by translateFunction in toplevel.fbl
	js * ')';
	return js;
}

string function translateReturn(Xreturn xreturn) {
	var string js, Xob vl;
	js = 'return';
	vl = obsel(xreturn~ob,Xreturn_value)~Xob;
	if (nnul(vl)) {
		js * ' ';
		js * translateXob(vl);
	}
	return js;
}

string function translateAssign(Xassign xassign) {
    var string js, Xob source, dest;
	dest = obsel(xassign~ob, Xassign_dest)~Xob;
	source = obsel(xassign~ob, Xassign_source)~Xob;
	js = '';
    js * translateXob(dest);
    js * '=';
	js * translateXob(source);
    return js;
}

string function translateBlock(Xblock xblock) {
    var string js, Xob ls, SeqOfXob st, int i, ln, SeqOfOb lv;
	js = '';
    js * '{';
	js * jsLastLocalVars;
	jsLastLocalVars = '';
	ls = obsel(xblock~ob, Xblock_locals)~Xob;
	//lv = mget(ls,Regarding);
	/*if (nnul(ls)) {
		var SeqOfOb prps,int i,n, ob m;
		prps = obProperties(ls);
		n=length(prps);
		for(i=0;i<n;i++){
			writeln(prps[i]);
		}
	}*/
    if (nnul(ls)) {
		js * translateXob(ls);
	}
	st = obsel(xblock~ob, Xblock_statements)~SeqOfXob;
	ln = length(st);
	if (nnul(st) && (ln > 0)) {
		for (i = 0;i < ln;i++) {
			if (not(isNulXob(st[i]))) {
				closeStatementAfterNextXob = true;
				js * translateXob(st[i]);
			}
		}
	}
    js * '}';
	return js;
}

string function funcname(Xapply xapply) {
	var string fns, ob fnn, Xob fn;
	fns = '';
	//writeln(xapply, type0(xapply), obsel(xapply, rdf:type));
	if (nnul(xapply)) {
		fn = obsel(xapply~ob, Xapply_functionOf)~Xob;
		//writeln(fn);
		if (nnul(fn) && not(isBinding(fn))) { // for some reason sometimes fn is a binding, and next obsel fails
			fnn = obsel(fn, Function_name)~ob;
			//writeln('-- ', fnn);
			fns * fnn;
		}
	}
	return fns;
}

string function translateUnaryOp(Xapply xapply, string op, boolean postfix) {
    var string js, Xob dst, SeqOfXob dt, int ln,i;
	js = '';
	dst = obsel(xapply~ob, Xapply_dest)~Xob;
	if (nnul(dst)) {
		js * translateXob(dst);
		js * ' = ';
	}
	dt = obsel(xapply~ob, Xapply_arguments)~SeqOfXob;
	ln = length(dt);
	if (nnul(dt) && (ln == 1)) {
		if (!postfix) js * op;
		js * translateXob(dt[0]);
		if (postfix) js * op;
	}
    return js;
}

string function translateUnaryOp(Xapply xapply, string op) {
	return translateUnaryOp(xapply, op, false);
}

string function translateBinaryOp(Xapply xapply, string op, boolean enclosed) {
    var string js, Xob dst, SeqOfXob dt, int ln,i;
	js = '';
	dst = obsel(xapply~ob, Xapply_dest)~Xob;
	if (nnul(dst)) {
		js * translateXob(dst);
		js * ' = ';
	}
	dt = obsel(xapply~ob, Xapply_arguments)~SeqOfXob;
	ln = length(dt);
	if (nnul(dt) && (ln == 2)) {
		if (enclosed) js * '(';
		js * translateXob(dt[0]);
		js * op;
		js * translateXob(dt[1]);
		if (enclosed) js * ')';
	}
    return js;
}

string function translateBinaryOp(Xapply xapply, string op) {
	return translateBinaryOp(xapply, op, true);
}

string function translateMkStringBuf(Xapply xapply) {
    var string js, Xob dst, SeqOfXob dt, int ln,i;
	js = '';
	dt = obsel(xapply~ob, Xapply_arguments)~SeqOfXob;
	ln = length(dt);
	if (nnul(dt) && (ln == 1)) {
		js * translateXob(dt[0]);
	}
    return js;
}

string function translateApply(Xapply xapply) {
    var string js, fnn, Xob fn, dst, SeqOfXob dt, int ln,i;
	js = '';
	fn = obsel(xapply~ob, Xapply_functionOf)~Xob;
	fnn = funcname(xapply);
	if (nnul(fnn) && length(fnn) > 0) { // sometimes fnn is an empty string!
		if (fnn == 'equal') return translateBinaryOp(xapply, '===');
		if (fnn == 'not') return translateUnaryOp(xapply, '!');
		if (fnn == 'and') return translateBinaryOp(xapply, '&&');
		if (fnn == 'or') return translateBinaryOp(xapply, '||');
		if (fnn == 'greaterp') return translateBinaryOp(xapply, '>');
		if (fnn == 'geq') return translateBinaryOp(xapply, '>=');
		if (fnn == 'lessp') return translateBinaryOp(xapply, '<');
		if (fnn == 'leq') return translateBinaryOp(xapply, '<=');
		if (fnn == 'mod') return translateBinaryOp(xapply, '%');
		if (fnn == 'plus') return translateBinaryOp(xapply, '+');
		if (fnn == 'difference') return translateBinaryOp(xapply, '-');
		if (fnn == 'plus_plus') return translateUnaryOp(xapply, '++', true);
		if (fnn == 'minus_minus') return translateUnaryOp(xapply, '--', true);
		if (fnn == 'unary_minus') return translateUnaryOp(xapply, '-');
		if (fnn == 'nnul') return translateUnaryOp(xapply, '');
		if (fnn == 'nul') return translateUnaryOp(xapply, '!');
		if (fnn == 'mkStringBuf') return translateMkStringBuf(xapply);
		if (fnn == 'copyStringConst') return ''; // what is this ?

		dst = obsel(xapply~ob, Xapply_dest)~Xob;
		if (nnul(dst)) {
			js * translateXob(dst);
			js * ' = ';
		}
		js * decorateFunctionName(fn~Function);
		js * '(';
		dt = obsel(xapply~ob, Xapply_arguments)~SeqOfXob;
		ln = length(dt);
		if (nnul(dt) && (ln > 0)) {
			for (i = 0;i < (ln-1);i++) {
				js * translateXob(dt[i]);
				js * ',';
			}
			js * translateXob(dt[ln-1]);
		}
		js * ')';
	}
    return js;
}

string function translateFor(Xfor xfor) {
	var string js, Xob init, test, incr, body;
	init = obsel(xfor~ob, Xfor_init)~Xob;
	test = obsel(xfor~ob, Xfor_test)~Xob;
	incr = obsel(xfor~ob, Xfor_incr)~Xob;
	body = obsel(xfor~ob, Xfor_body)~Xob;
	js = 'for(';
	js * translateXob(init);
	js * ';';
	js * translateXob(test);
	js * ';';
	js * translateXob(incr);
	js * ') ';
	closeStatementAfterNextXob = true;
	js * translateXob(body);
	return js;
}

string function translateWhile(Xwhile xwhile) {
	var string js, Xob test, body;
	test = obsel(xwhile~ob, Xwhile_test)~Xob;
	body = obsel(xwhile~ob, Xwhile_body)~Xob;
	js = 'while(';
	js * translateXob(test);
	js * ') ';
	closeStatementAfterNextXob = true;
	js * translateXob(body);
	return js;
}

string function translateIf(Xif xif) {
    var string js, Xob iff;
	js = '';
    js * 'if(';
    js * translateXob(obsel(xif~ob, Xif_condition)~Xob);
    js * ') ';
	closeStatementAfterNextXob = true;
    js * translateXob(obsel(xif~ob, Xif_ifTrue)~Xob);
    iff = obsel(xif~ob, Xif_ifFalse)~Xob;
	if (nnul(iff)) {
        js * ' else ';
		closeStatementAfterNextXob = true;
        js * translateXob(iff);
    }
    return js;
}

string function translateSequence(Xsequence xsequence) {
	var string js, SeqOfXob args, int i, ln;
	args = obsel(xsequence~ob,Xsequence_arguments)~SeqOfXob;
	js = '';
	ln = length(args);
	js * '[';
	for (i=0;i<ln;i++) {
		js * translateXob(args[i]~Xob);
		if (i<ln-1) js * ',';
	}
	js * ']';
	return js;
}

string function translateSelectIndex(XselectIndex xselectindex) {
	var string js, SeqOfXob args, int i, ln, Xob src,sl;
	src = obsel(xselectindex~ob,XselectIndex_source)~Xob;
	sl = obsel(xselectindex~ob,XselectIndex_selector)~Xob;
	js = translateXob(src);
	js * '[';
	js * translateXob(sl);
	js * ']';
	return js;
}

string function translateSelectProperty(XselectProperty xselectproperty) {
	var string js, Xob src,Property prp;
	src = obsel(xselectproperty~ob,XselectProperty_source)~Xob;
	prp = obsel(xselectproperty~ob,XselectProperty_selector)~Property;
	js = translateXob(src);
	js * '[';
	addChar(js, ascii_squote);
	js * prp;
	addChar(js, ascii_squote);
	js * ']';
	return js;
}

string function translateCast(Xcast xcast) {
	var string js, Xob cv;
	cv = obsel(xcast~ob,Xcast_castee)~Xob;
	js = translateXob(cv); // just ignore the cast in JS
	return js;
}

string function translateXob(Xob x) {
    var string js, lv, boolean closeStatement;

	if (skipNextXob == true) {
		skipNextXob = false;
		return '';
	}

	//writeln('type:',obsel(x, rdf:type),'  val  ',x);
	closeStatement = false;
	if (closeStatementAfterNextXob) {
		closeStatementAfterNextXob = false;
		closeStatement = true;
	}

	js = '';
	/*js = '[';
	js * obkind(x);
	if (isObject(x)) {
		js * obsel(x, rdf:type);
		///js * type(x);
		//js * type0(x); // type0 takes the first meaningful type ? ie excluding rdfs:Resource for example ?
	}*/
	if (isNulXob(x)) js * 'null';
	else if (isConstant(x)) js * translateConstant(x);
	else if (isFunction(x~ob)) js * translateFunction(x~Function);
	else if (isBinding(x~ob)) js * translateBinding(x~Binding);
	else if (hasType(x~ob, Xreturn)) js * translateReturn(x~Xreturn);
    else if (hasType(x~ob, Xassign)) js * translateAssign(x~Xassign);
	else if (hasType(x~ob, Xblock)) js * translateBlock(x~Xblock);
	else if (hasType(x~ob, Xapply)) js * translateApply(x~Xapply);
	else if (hasType(x~ob, Xfor)) js * translateFor(x~Xfor);
	else if (hasType(x~ob, Xwhile)) js * translateWhile(x~Xwhile);
	else if (hasType(x~ob, Xif)) js * translateIf(x~Xif);
	else if (hasType(x~ob, Xsequence)) js * translateSequence(x~Xsequence);
	else if (hasType(x~ob, XselectIndex)) js * translateSelectIndex(x~XselectIndex);
	else if (hasType(x~ob, XselectProperty)) js * translateSelectProperty(x~XselectProperty);
	else if (hasType(x~ob, Xcast)) js * translateCast(x~Xcast);
	else if (eq(obsel(x, rdf:type), rdfs:Resource)) writeln('rdfs:Resource found => not translated to JS');
	else {
		js = '<unknown Xob type>: ';
		js * obsel(x, rdf:type);
		js * ';';
		//js * type0(x);
	}
	//js * ']';

	// js * translateLocalVariablesDeclaration(x~ob);

	if (closeStatement) {
		if (isFunction(x~ob) || hasType(x~ob, Xblock) || hasType(x~ob, Xif)) {
			// no need to close in these cases
		} else {
			js * ';';
		}
	}

	return js;
}

string function translateToJS(Xob x) {
    var string js;

	if (nul(jsg)) {return '';}
	if (hasType(x~ob, Xapply) && (funcname(x~Xapply) == 'translateToJS')) { // exclude the call to translateJS itself from translation
		return '';
	}

	closeStatementAfterNextXob = true;
	js = translateXob(x);

	jsg * js;

	return js;
}

/**
* Translation of global and local variable declarations.
*/
string function translateToJS(ob x,id nm,ob vl,Sort s, boolean local) {
	var string js, sid;

	sid = translateId(nm);
	if (startsWith(sid, 'anytemp_')) return '';
	if (nnul(s) && isFunctionType(s)) {
		skipNextXob = true;
		return ''; // ignore function declaration
	}

	js = 'var ';
	if (nnul(s) && outputTypesToJS) {
		js * '/*';
		js * obkind(s);
		js * '*/ ';
	}
	js * sid;

	if (nnul(vl) && ((obkind(vl) != int_kind) || (vl~int != 0)) && ((obkind(vl) != double_kind) || (vl~double != 0.0))) {
		js * '=';
		closeStatementAfterNextXob = true;
		/*if (isConstant(vl~Xob) && (obkind(vl) == seq_kind)) {
			// apparently constants with kind seq_kind follow a separate path
			js * translateConstant(vl~Xob);
			js * ';';
		} else {
			// right hand side will be translated while parsing it, right after this, but we need to remember to close the statement with a ;
			closeStatementAfterNextXob = true;
		}*/
	} else {
		js * ';';
	}

	if (local) jsLastLocalVars * js;
	else jsg * js;

	return js;
}

string function translateToJS(string fln, boolean storeToJS) {
	var string fnc, fle, fnn, out, Xob x, ob tp, SeqOfOb hp, int i, n, lastSlash;
	writeln('Translating ', fln);
	translateJS = true;
    load(fln); // this will parse and analyze fabl code and generate JS code
	translateJS = false;

	/*hp = homePath();
	n = length(hp);
	for (i=0;i<n;i++) {
		writeln(type0(hp[i]));
		translateXob(hp[i]~Xob);
	}*/

	if (storeToJS) {
		lastSlash = findFromEnd(fln, ascii_slash); // search for last /
		fle = fileExtension(fln);
		fnn = substr(fln, lastSlash + 1, length(fln) - length(fle) - (lastSlash + 1) - 1);
		out = '../out/';
		out * fnn;
		out * '.js';
		storeJS(out);
		resetJS();
	}

	return jsg;

	//write('r: ', thisFileR);
	//tp = fget(thisFileR,topicP);
	///jsg = translateToJS(lastXob);

	/*fnc = '';
	readFromFile(fnc, fln);
	x = evaluate(fnc)~Xob;
	return translateToJS(x);*/
}

string function translateToJS(string fln) {
	return translateToJS(fln, true);
}
