/*
* Copyright (C) 2004 Map Bureau - http://www.mapbureau.com
*
* This package is Free Software released under the BSD license.
*
* See license.html at the top of this package for the full license terms.
*
*/

// Most code comments temporarily excised, pending review



void function times(string s,Xassign x)
  {
  var Xob src,dst;
  src= obsel(x~ob,Xassign_source)~Xob;
  dst =  obsel(x~ob,Xassign_dest)~Xob;
//  src= source(x);
//  dst = dest(x);
  times(s,dst);
  times(s,'=');
  times(s,src);
  }

//void function plus(string s,Xassign x){times(s,x)}//remove

void function times(string s,XselectProperty x)
{
  var Xob src,Property prp;
  src = obsel(x~ob,XselectProperty_source)~Xob;
  prp = obsel(x~ob,XselectProperty_selector)~Property;
  times(s,src);
  times(s,'.');
  times(s,prp);
}

//void function plus(string s,XselectProperty x){times(s,x)}//remove


void function times(string s,Xcast x)
  {
  times(s,obsel(x~ob,Xcast_castee)~Xob);
//  times(s,castee(x));
  times(s,'~');
//  times(s,obsel(x~ob,cast_type)~Sort);
  times(s,type(x~Xob));
  }

//void function plus(string s,Xcast x){times(s,x)}//remove

string function times(string s,Xif x)
  {
  var Xob iff;
//  iff = if_false(x);
  iff = obsel(x~ob,Xif_ifFalse)~Xob;
  times(s,'if (');
  times(s,obsel(x~ob,Xif_condition)~Xob);
  times(s,obsel(x~ob,Xif_ifTrue)~Xob);
//  times(s,condition(x));
//  times(s,if_true(x));
  if (nnul(iff))  
     {
	 times(s,'; else ');
     times(s,iff);
	 }
  }

//void function plus(string s,Xif x){times(s,x)}//remove




void function times(string s,Xapply x)
  {
  var Xob fn,dst,SeqOfXob dt,int ln,i;
  fn = obsel(x~ob,Xapply_functionOf)~Xob;
  dst = obsel(x~ob,Xapply_dest)~Xob;
//  fn = functionOf(x);
//  dst = dest(x);
//  fn = fun_of(x);
//  dst = dest(x);
  if (nnul(dst)) 
     {
	 times(s,dst);
	 times(s,' = ');
	 }
  times(s,fn);
  times(s,'(');
  dt = obsel(x~ob,Xapply_arguments)~SeqOfXob;
  ln = length(dt);
  if (nnul(dt)&&(ln>0))
     {
	 for (i = 0;i<(ln-1);i++)
	     {
	     times(s,dt[i]);
		 times(s,',');
		 }
	 times(s,dt[ln-1]);
	 }
  times(s,')');
  }

//void function plus(string s,Xapply x){times(s,x)}//remove




void function times(string s,Xblock x)
  {
  var SeqOfXob dt,int ln,i;
  times(s,'  {');
  times(s,10~byte);
//  dt = statements(x);
  dt = obsel(x~ob,Xblock_statements)~SeqOfXob;
  if (nnul(dt))
     {
	 ln = length(dt);
	 for (i = 0;i<ln;i++)
	     {
		 times(s,'   ');
		 times(s,dt[i]);
		 times(s,';');
		 times(s,10~byte);
         }
	 }
  times(s,'   }');
  times(s,10~byte);
  }

//void function plus(string s,Xblock x){times(s,x)}//remove

void function times(string s,Xreturn x)
  {
  var Xob vl;
  vl = obsel(x~ob,Xreturn_value)~Xob;
//  vl = value(x);
  if (nul(vl)) times(s,'return');
  else
      {
	  times(s,'return ');
	  times(s,vl);
	  }
  }

//void function plus(string s,Xreturn x){times(s,x)}//remove


void function times(string s,Xgo x)
  {
  var Xob vl;
  vl = obsel(x~ob,Xgo_condition)~Xob;
//  vl = condition(x);
  times(s,'Go ');
  if (nnul(vl)) 
     {
//	 if (go_if_false(x)) 
     if (bitsel(x~ob,Xgo_booles,Xgo_goIfFalse)~boolean)
		times(s,'(iffalse:');
     times(s,vl);
     times(s,') ');
	 }
  times(s,' ');
  times(s,obsel(x~ob,Xgo_toLabel)~id);
//  times(s,to_label(x));
  }


//void function plus(string s,Xgo x){times(s,x)}//remove

//var Function(string,ob) uri;

void function times(string s,Xob x)
  {
  var Sort xs,Xapply xap,Xblock xbl,Xassign xas,Xif xif,ob xo,int k,
     Xreturn xrt,id lb,string lbs,Xgo xg,Xfor xfr,
	 Xsequence xsq,Xcast xcst,ob ky;
  xo = x ~ob;
  k = obkind(xo);
  if (k == string_kind) {times(s,x ~ ob ~ id);return;}
  if (k == string_kind) {times(s,x ~ ob ~ id);return;}
  if (k == int_kind) {times(s,xo ~ int);return;} 
  if (k == double_kind) {times(s,xo ~ double);return;} 
  if (isFunction(xo)) {s * (x~Function);return;}
  if (isBinding(xo)) 
     {
	 s * (xo~Binding);
//	 ky = obsel(xo,Binding_key);
//	 if (obkind(ky~ob)==string_kind) s * (ky~id);
//	 else s * '<non-id-binding>';
//	 else s * uri(nm~ob); //LATER
	 }
  else
     {
	 if (nul(x)) {times(s,'nul');return}
	 if (not(Xobish(x))) error('internal:',xs);
	 lb = aLabelOf(x);
	 lbs = mkStringBuf('');
	 if (nnul(lb)) 
	    {
		lbs * lb;
		lbs * ':';
		}
	 if (bitsel(x~ob,Xob1_booles,Xob1_isNoop)~boolean) {times(s,lbs);times(s,'NOOP');return}


	 if (hasType(xo,Xapply)) {times(s,lbs);times(s,x~Xapply);return}
	 if (hasType(xo,XselectProperty)) {times(s,lbs);times(s,x~XselectProperty);return}
	 if (hasType(xo,Xblock)) {times(s,lbs);times(s,x~Xblock);return}
	 if (hasType(xo,Xreturn)) {times(s,lbs);times(s,x~Xreturn);return}
	 xg = x~Xgo; 
	 if (hasType(xo,Xgo)) {times(s,lbs);times(s,x~Xgo);return}

	 if (hasType(xo,Xassign)) {times(s,lbs);times(s,x~Xassign);return}
	 if (hasType(xo,Xif)) {times(s,lbs);times(s,x~Xif);return}
	 if (hasType(xo,Xcast)) {times(s,lbs);times(s,x~Xcast);return}

	 times(s,'<unprintable Xob>');
	 }
  }



