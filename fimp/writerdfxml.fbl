/*
* Copyright (C) 2004 Map Bureau - http://www.mapbureau.com
*
* This package is Free Software released under the BSD license.
*
* See license.html at the top of this package for the full license terms.
*
*/

// Most code comments temporarily excised, pending review

// Writing RDF in XML syntax

/*
load("../fimpsrc/writerdf.v1.fbl");
*/

// pseudo uris of the form a/b/c (that don't start with a scheme) are turned into
// file://./a/b/c/

var ob blankNodeTable; // maps blank nodes to their ids
var ob beenWrittenTable; // maps fellows that have been written to 'yes'
var SeqOf(id) xmlNamespaces;
var xmlSizeLimit = 10000;

string function qualifiedNameCollectNamespace(ob x)
{
   var string qn,int clp,id ns;
   qn = qualifiedName(x);
   if (nul(qn)) return qn;
   clp = indexOf(qn,ascii_colon);
   ns = toId(substring(qn,0,clp));
   if (!contains(xmlNamespaces,ns)) push(xmlNamespaces,ns);
   return qn;
}


var blankIdSeed = 'n_';
var blankIdCount = 0;

id function blankNodeName(ob r)
{
   var Property rr,id nm;
   rr = regarding(r);
   nm = get(blankNodeTable,rr)~id;
   if (nul(nm))
      {
	  nm = genName(blankIdSeed,blankIdCount++);
	  set(blankNodeTable,rr,nm~ob);
	  }
  return nm;
}



   
void function xmlWriteResourceTag(string bf,ob r)
{
   var string u,ob tp,int tpk,ln,SeqOf(Class) tps,Class mtp,string tpnm,Property rr;
   rr = regarding(r);
   u = uri(r);
   tp = get(r,rdf:type);
   tpk = obkind(tp);
   if (tpk == seq_kind) // multiple values
      {
	  tps = tp ~ SeqOf(Class);
	  ln = length(tps);
	  if (ln > 0)
		 mtp = tps[ln-1];
	  }
   else mtp = tp ~ Class;
   if (nnul(mtp)) tpnm = qualifiedNameCollectNamespace(mtp~ob);
   if (nul(tpnm))
	  writeTo(bf,"<rdf:Description ");
   else
	  writeTo(bf,"<",tpnm);
   if (nul(u)) // a blank node
      writeTo(bf," rdf:nodeID=\"",blankNodeName(r),"\"");
   else
       writeTo(bf," rdf:about=\"",u,"\"");
   writeTo(bf,">\n");
   set(beenWrittenTable,rr,'yes'~ob);

}

void function xmlWriteResourceEndTag(string bf,ob r)
{
   var Class mtp,string tpnm;
   mtp = fget(r,rdf:type)~Class;
   if (nnul(mtp)) tpnm = qualifiedNameCollectNamespace(mtp~ob);
   if (nul(tpnm))
	  writeTo(bf,"</rdf:Description>");
   else
	  writeTo(bf,"</",tpnm,">\n");
}


var intUri = "http://www.w3.org/2001/XMLSchema#int";
var doubleUri = "http://www.w3.org/2001/XMLSchema#double";
var stringUri = "http://www.w3.org/2001/XMLSchema#string";
var booleanUri = "http://www.w3.org/2001/XMLSchema#boolean";
var idUri = "http://nurl.org/0/fabl/id";
// tp = ob means unknown (no explicit datatype given)

void function xmlWriteDatatypeProperty(string bf,string pnm,ob v,Class tp)
{
   var string tpuri;
   writeTo(bf,"<",pnm);
   if (!(tp == ob))
      {
	  if (tp == int) tpuri = intUri; else
	  if (tp == double) tpuri = doubleUri; else
	  if (tp == string) tpuri = stringUri; else
	  if (tp == id) tpuri = idUri; else
	  if (tp == boolean) tpuri = booleanUri; else
	  error("Internal: unexpected type: ",tp);
	  writeTo(bf," rdf:datatype=\"",tpuri,"\"");
	  }
  writeTo(bf,">",v,"</",pnm,">\n");
  if (length(bf) > xmlSizeLimit) error("exceeded RDF/XML size limit");
}

var Function(void,string,ob)  xmlSerialize;

// non datatype property

void function xmlWriteProperty(string bf,string pnm,ob r)
{
   var string u;
   writeTo(bf,"<",pnm);
   if (nul(fget(beenWrittenTable,regarding(r))))
     {
	 writeTo(bf,">\n");
	 xmlSerialize(bf,r);
     writeTo(bf,"</",pnm,">\n");
	 }
   else
     {
     u = uri(r);
     if (nul(u))
	    writeTo(bf," rdf:nodeID=\"",blankNodeName(r),"\"/>\n");
     else
	    writeTo(bf," rdf:resource=\"",u,"\">/>\n");
	 }
  if (length(bf) > xmlSizeLimit) error("exceeded RDF/XML size limit");
}




boolean function xmlSerialize(string bf,Binding b)
{
   var ob k,string kq,Property p,ob v,Class btp,vtp0,ptp,vtp,int vk,boolean isdtp,string pnm;
   k = bindingKey(b~ob);
   kq = qualifiedNameCollectNamespace(k);
   if (nul(kq)) return false; // not suitable for xml
   p = k ~ Property;
   v = bindingValue(b);
   btp = obsel(b~ob,Binding_type)~Class;
   if (nul(btp) || (btp == ob))
      {
	  ptp = range(p);
	  if (nnul(ptp)) vtp = ptp;
	  }
  else vtp = btp;
  if (nul(vtp)) vtp = ob;
  vtp0 = type0(v);
  if (vtp0 != ob) 
     {
	 if (vtp == ob) vtp = vtp0;
	 else vtp = mostSpecific([vtp0,vtp]);
	 }
  // note that type deduction involving the class is not present here
  vk = obkind(v);
  if (vk == double_kind) vtp = double; //  only case where value is unambiguous in type
  isdtp = isString(v) || isId(v) || (vk == int_kind) || (vk == double_kind);
   pnm = qualifiedNameCollectNamespace(p~ob);
   if (nul(pnm)) error("Cannot write out a property without a qualified name: ",uri(p));
  if (isdtp) 
	 xmlWriteDatatypeProperty(bf,pnm,v,vtp);
  else
     xmlWriteProperty(bf,pnm,v);
  return true;
}
  





var xmlSerializePage = 0;


void function xmlSerialize(string bf,ob r)
{
   var int k,SeqOf(Binding) bn,int vk,dk,bfln,bcnt,ln,i,Binding b,ob v,Class vtp,
       SeqOf(ob) sqo,boolean isdtp;
//   writeln("xmlSerialize ",obkind(r),' ' ,r,bindings(r));
   if (length(bf) > xmlSizeLimit) error("exceeded RDF/XML size limit");
  k = obkind(r);
   if (k == hashtable_kind)
      {
	  bn = bindings(r);
	  bfln = length(bf);
	  xmlWriteResourceTag(bf,r);
	  ln = length(bn);
	  bcnt = 0;
	  for (i=0;i<ln;i++)
	      {
		  b = bn[i];
		  if ((xmlSerializePage < 0) || (page(b~ob) == xmlSerializePage))
		     {
			  if (xmlSerialize(bf,b)) bcnt ++;
			 }
		  }
//	  if (bcnt > 0) 
	  xmlWriteResourceEndTag(bf,r);
//	  else seqSetLength(bf~ob,bfln);
	  }
   if (k == seq_kind)
      {
	  bf * "<rdf:Seq>\n";
	  dk = seqDataKind(r);
	  if (dk == seqDataOb_kind)
	     {
		 sqo = r ~ SeqOf(ob);
		 ln = length(sqo);
		 for (i = 0;i<ln;i++)
		     {
			 v = sqo[i];
			 vtp = type0(v);
			 vk = obkind(v);
			 if (vk == double_kind) vtp = double; //  only case where value is unambiguous in type
			 isdtp = isString(v) || isId(v) || (vk == int_kind) || (vk == double_kind);
			 if (isdtp) 
		        xmlWriteDatatypeProperty(bf,"rdf:li",v,vtp);
			else
			    xmlWriteProperty(bf,"rdf:li",v);
			}
		}	
	 else  error("this kind of sequence not supported yet");
	  bf * "</rdf:Seq>\n";
	 }
}
 
	  







var xmlBoilerPlate = 
"<?xml version=\"1.0\" encoding=\"iso-8859-1\" ?>
<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"
";

void function addXmlNamespace(string bf,id ns)
{
   var string nsuri;
   nsuri = uri(namespace(ns));
   bf * "xmlns:{ns}=\"{nsuri}\"\n";
}

void function addXmlNamespaces(string bf,SeqOf(id) ns)
{
  var int ln,i;
   ln = length(ns);
   for (i=0;i<ln;i++)  addXmlNamespace(bf,ns[i]);
   bf * ">\n";
}

void function xmlSerialize(string bf,SeqOfOb v,int pg)
{
   var int i,ln,ob cv,string rbf;
   xmlSerializePage = pg;
   blankNodeTable = new(Resource);
   beenWrittenTable = new(Resource);
   xmlNamespaces = new(SeqOf(id));
   blankIdCount = 0;
   ln = length(v);
   rbf = "";
   for (i=0;i<ln;i++) 
      {
	  cv = v[i];
	  if ((xmlSerializePage < 0) || (page(cv) == xmlSerializePage)) xmlSerialize(rbf,cv);
	  }
   bf * xmlBoilerPlate;
   addXmlNamespaces(bf,xmlNamespaces);
   bf * rbf;
   bf * "</rdf:RDF>\n";
}

void function xmlSerializeToFile(string fl,SeqOfOb v,int pg)
{
   var string bf;
   bf = "";
   xmlSerialize(bf,v,pg);
   fwrite(fl,bf);
}

void function xmlSerializeToFile(string fl,SeqOfOb v)
{
   xmlSerializeToFile(fl,v,-1);
}
/*
var xmlSerializeBuf = "";

void function xmlSerializeToBuf(string bf,SeqOfOb v,int pg)
{
  serializeCollect(v,nil,pg);
  xmlSerialize(bf,toSerialize,pg);
  restoreTempBits();
}
*/

/*

load("../fimpsrc/writerdfxml.v2.fbl");

load("file://../lib/foaf-0.1-1.fb");

var bf = "";
startCollectingTriples();
allocate("ex:r0",foaf:Person);
allocate("ex:p0",Property);
allocate("ex:p1",Property);
allocate("ex:p2",Property);
allocate("ex:p3",Property);
ex:r0 . ex:p0 = "abc";
var nn = new(foaf:Person);
ex:r0 . ex:p1 = nn;
ex:r0 . ex:p2 = nn;
var zz = ["hijk"~ob,4~ob,new(foaf:Project)~ob];
ex:r0 . ex:p3 = zz;

//xmlSizeLimit = 30;
//xmlSerializeToFile("file:///fabl3/tests/rdftest.xml",[ex:r0],currentPage());
xmlSerializeToFile("file:///fabl3/tests/rdftest.xml",[ex:r0]);
//bf;


//xmlSerializeToBuf(bf,[ex:r0],currentPage());

xmlSerialize(bf,[ex:r0],currentPage());
bf;


   set_collectingSubjects(false);
var int i;
var cls = collectedSubjects();
var   ln = length(cls);
   for (i = 0;i<ln;i++) set_tempbit(cls[i],false);

*/

