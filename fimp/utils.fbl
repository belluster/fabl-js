/*
* Copyright (C) 2004 Map Bureau - http://www.mapbureau.com
*
* This package is Free Software released under the BSD license.
*
* See license.html at the top of this package for the full license terms.
*
*/

// Most code comments temporarily excised, pending review


/* word like (logical) operations on integers */

/* low half word mask */
var lhwm = 65535;
/* high half word mask */
var hhwm = -65536;

var byte0_mask = 255;
var byte1_mask = 65280;
var byte2_mask = 16711680;
var byte3_mask = -16777216;

int function highHalf(int x)
  {
   return lshift(x,-16);
  }

int function low_half(int x)
  {
  return land(x,lhwm);
  }


int function setLowHalf(int x,int y)
  {
  return  lor(land(x,hhwm),land(y,lhwm));
  }

int function setHighHalf(int x,int y)
  {
  return lor(lshift(y,16),land(x,lhwm));
  }

// int->byte cg 9/17/02
byte function byte0(int x)
  {
  return land(x,byte0_mask)~byte;
  }


byte function byte1(int x)
  {
  return land(lshift(x,-8),byte0_mask)~byte;
  }

byte function byte2(int x)
  {
  return land(lshift(x,-16),byte0_mask)~byte;
  }


byte function byte3(int x)
  {
  return land(lshift(x,-24),byte0_mask)~byte;
  }


int function setByte0(int x,int y)
   {
   return lor(land(x,lnot(byte0_mask)),land(y,byte0_mask));
   }


int function setByte0(int x,byte y)
   {
   return lor(land(x,lnot(byte0_mask)),twiddle(y,int));
   }


int function setByte1(int x,int y)
   {
   return lor(land(x,lnot(byte1_mask)),lshift(land(y,byte0_mask),8));
   }


int function setByte1(int x,byte y)
   {
   return lor(land(x,lnot(byte1_mask)),lshift(twiddle(y,int),8));
   }



int function setByte2(int x,int y)
   {
   return lor(land(x,lnot(byte2_mask)),lshift(land(y,byte0_mask),16));
   }



int function setByte2(int x,byte y)
   {
   return lor(land(x,lnot(byte2_mask)),lshift(twiddle(y,int),16));
   }


int function setByte3(int x,int y)
   {
   return lor(land(x,lnot(byte3_mask)),lshift(land(y,byte0_mask),24));
   }


int function setByte3(int x,byte y)
   {
   return lor(land(x,lnot(byte3_mask)),lshift(twiddle(y,int),24));
   }





string function toHex(int x)
   {
   var string s,int i,cx,ln;   
   s = mkStringBuf('        ');
   cx = x;
  for (i = 0;i<8;i++)
       {
       ln = land(cx,15);
	   if (ln < 10) set(s,7-i,48+ln);
	   else set(s,7-i,87+ln);
       cx = lshift(cx,-4);
       }
  return s;
  }



void function to_hex(string rs,int x,numdigits)
   {
   var int i,cx,ln,lnr;  
   for (i=0;i<numdigits;i++) rs *'0';
   lnr = length(rs)-1;
   cx = x;
   for (i = 0;i<numdigits;i++)
       {
       ln = land(cx,15);
       if (ln < 10) set(rs,lnr - i,48 + ln);
       else set(rs,lnr - i,87 + ln);
       cx = lshift(cx,-4);
       }
  }

int function toInt(boolean x)
{
  if (x) return 1;
  return 0;
}




boolean function equal(id a,b)
{
  return eq(a,b);
}


var regardingNamespaces = regarding('namespaces');


ob function homeNamespaces()
{
  var ob nms;
  nms = get(home,regardingNamespaces);
  if (nul(nms)) error('Home is missing namespaces property');
  return nms;
}


ob function car(ob x)
{
  return listSelect(x,0);
}

ob function cdr(ob x)
{
  if (not(isList(x))) error('cdr of non-list');
  return obsel(x,List_rest);
}


ob function cadr(ob x)
  {
  return listSelect(x,1);
  }

ob function caddr(ob x)
  {
  return listSelect(x,2);
  }

ob function cadddr(ob x)
 {
  return listSelect(x,3);
 }


void function garbageCollection(boolean v)
{
  allocStatically(!v);
}


ob function list1(ob x)
  {
  return cons(x,rdf:nil);
  }

ob function list2(ob x,y)
  {
  return cons(x,cons(y,rdf:nil));
  }
ob function list3(ob x,y,z)
  {
  return cons(x,cons(y,cons(z,rdf:nil)));
  }

ob function list4(ob x,y,z,z2)
  {
  return cons(x,cons(y,cons(z,cons(z2,rdf:nil))));
  }


ob function list5(ob x,y,z,z2,z3)
  {
  return cons(x,cons(y,cons(z,cons(z2,cons(z3,rdf:nil)))));
  }




ob function toList(SeqOfOb a)
  {
  var ob rs,int ln,i;
  if (nul(a)) return rdf:nil;
  ln = length(a);
  rs = rdf:nil;
  for (i = ln-1;i>=0;i--)
	  rs = cons(a[i],rs);
  return rs;
  }

boolean function listNul(ob x)
{
  return nul(x) || eq(x,rdf:nil);
}
